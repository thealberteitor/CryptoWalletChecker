#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# sender.py
#
# This file is part of ---
#
# Copyright (C) 2017
# Lorenzo Carbonell Cerezo <lorenzo.carbonell.cerezo@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from optparse import OptionParser
from pprint import pprint
from PIL import Image
from time import sleep
import requests
import base64
from io import BytesIO
import logging
import codecs
import os
import sys
import json
import subprocess
import shlex
import lxml.html as lh
from lxml.html.clean import clean_html
try:
    from telegram import Bot, ParseMode
    from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Updater
    from telegram.ext import CommandHandler, ConversationHandler, RegexHandler
    from telegram.ext import CallbackQueryHandler, MessageHandler, Filters
    from telegram import InlineQueryResultArticle, InputTextMessageContent
    from telegram.ext import InlineQueryHandler
except Exception as e:
    sys.path.insert(1, '/usr/share/senderbot/')
    from telegram import Bot, ParseMode
    from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Updater
    from telegram.ext import CommandHandler, ConversationHandler, RegexHandler
    from telegram.ext import CallbackQueryHandler, MessageHandler, Filters
    from telegram import InlineQueryResultArticle, InputTextMessageContent
    from telegram.ext import InlineQueryHandler
try:
    from picamera import PiCamera
    exits_camera = True
except Exception as e:
    print(e)
    exits_camera = False


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - \
%(message)s',
                    level=logging.INFO,
                    filename='/tmp/senderbot.log',
                    filemode='w')
logger = logging.getLogger(__name__)

APP = 'senderbot'
APPNAME = 'SenderBot'
APPCONF = APP + '.conf'
CONFIG_DIR = os.path.join(os.path.expanduser('~'), '.config')
CONFIG_APP_DIR = os.path.join(CONFIG_DIR, APP)
CONFIG_FILE = os.path.join(CONFIG_APP_DIR, APPCONF)
PARAMS = {'token': None,
          'channel_id': None}

SERVICE = 1001
OPCION0 = 2000
OPCION1 = 2001
OPCION2 = 2002
OPCION3 = 2003
OPCION4 = 2004
OPCION5 = 2005
OPCION21 = 20021
OPCION31 = 20031

if not os.path.exists(CONFIG_APP_DIR):
    os.makedirs(CONFIG_APP_DIR)


def definition(word):
    url = 'http://www.wordreference.com/definicion/%s' % (word)
    response = requests.get(url)
    if response.status_code == 200:
        doc = lh.document_fromstring(clean_html(response.text))
        trans = doc.find_class('trans')
        if len(trans) > 0:
            results = list()
            for t in trans:
                result = lh.tostring(t,
                                     method='text',
                                     encoding='utf-8').decode()
                result = result.replace('.  ', '.\n')
                result = result.replace('. ', '.\n')
                results.append(result)
            return results
    return None


def run_command(command):
    command = shlex.split(command)
    result = subprocess.run(command,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    output = result.stdout.decode()
    error = result.stderr.decode()
    if len(output) > 0:
        return output
    if len(error) > 0:
        return 'Error: %s' % error
    return None


class Configuration(object):
    def __init__(self):
        self.params = PARAMS
        self.read()

    def get(self, key):
        try:
            return self.params[key]
        except KeyError as e:
            print(e)
            self.params[key] = PARAMS[key]
            return self.params[key]

    def set(self, key, value):
        self.params[key] = value

    def reset(self):
        if os.path.exists(CONFIG_FILE):
            os.remove(CONFIG_FILE)
        self.params = PARAMS
        self.save()

    def set_defaults(self):
        self.params = PARAMS
        self.save()

    def print_config(self):
        pprint(self.params)

    def read(self):
        try:
            f = codecs.open(CONFIG_FILE, 'r', 'utf-8')
        except IOError as e:
            print(e)
            self.save()
            f = codecs.open(CONFIG_FILE, 'r', 'utf-8')
        try:
            self.params = json.loads(f.read())
        except ValueError as e:
            print(e)
            self.save()
        f.close()

    def save(self):
        f = codecs.open(CONFIG_FILE, 'w', 'utf-8')
        f.write(json.dumps(self.params))
        f.close()


class SenderBot(Bot):
    def __init__(self, token=None, channel_id=None):
        if token is None or channel_id is None:
            configuration = Configuration()
            token = configuration.get('token')
            channel_id = configuration.get('channel_id')
        Bot.__init__(self, token)
        self.channel_id = channel_id

    def send_message(self, text):
        super(SenderBot, self).send_message(chat_id=self.channel_id,
                                            text=text,
                                            parse_mode=ParseMode.HTML)

    def send_image(self, file_image):
        print(file_image)
        if os.path.exists(file_image):
            super(SenderBot, self).sendPhoto(chat_id=self.channel_id,
                                             photo=open(file_image, 'rb'))
        elif file_image.startswith('https') or file_image.startswith('http'):
            print(1)
            super(SenderBot, self).sendPhoto(chat_id=self.channel_id,
                                             photo=file_image)

    def send_audio(self, file_audio):
        if os.path.exists(file_audio):
            extension = os.path.splitext(file_audio)[1][1:].strip().lower()
            if extension == 'ogg':
                super(SenderBot, self).sendVoice(chat_id=self.channel_id,
                                                 voice=open(file_audio, 'rb'))
            elif extension == 'mp3':
                super(SenderBot, self).sendAudio(chat_id=self.channel_id,
                                                 audio=open(file_audio, 'rb'))

    def send_document(self, file_document):
        if os.path.exists(file_document):
            super(SenderBot, self).sendDocument(chat_id=self.channel_id,
                                                document=open(file_document,
                                                              'rb'),
                                                timeout=999)

    def get_images(self):
        updates = super(SenderBot, self).get_updates()
        for index, update in enumerate(updates):
            if update.message.photo:
                file_id = update.message.photo[-1].file_id
                afile = self.get_file(file_id)
                afile.download()


def set_channel_id(channel_id):
    configuration = Configuration()
    configuration.set('channel_id', channel_id)
    configuration.save()


def set_token(token):
    configuration = Configuration()
    configuration.set('token', token)
    configuration.save()


def print_config():
    configuration = Configuration()
    configuration.print_config()


def get_images():
    cab = SenderBot()
    cab.get_images()


def send_message(message):
    cab = SenderBot()
    cab.send_message(message)


def send_image(image_file):
    cab = SenderBot()
    cab.send_image(image_file)


def send_audio(audio_file):
    cab = SenderBot()
    cab.send_audio(audio_file)


def send_document(document_file):
    cab = SenderBot()
    cab.send_document(document_file)


class InteractiveBot():
    def __init__(self, token=None):
        if token is None:
            configuration = Configuration()
            token = configuration.get('token')
        if token is not None and len(token) > 0:
            self.updater = Updater(token=token)
        else:
            self.updater = None


def only():
    configuration = Configuration()
    token = configuration.get('token')
    if token is not None and len(token) > 0:
        updater = Updater(token=token)
        dispatcher = updater.dispatcher

        def start(bot, update):
            bot.send_message(chat_id=update.message.chat_id,
                             text="¿Si?, mi amo!")

        def temp(bot, update):
            data = open('/sys/class/thermal/thermal_zone0/temp', 'r')
            temperatura = data.read()
            data.close()
            temperatura = temperatura[:-1]
            temperatura = str(float(temperatura) / 1000.0) + ' ºC'
            bot.send_message(chat_id=update.message.chat_id, text=temperatura)

        def samba(bot, update):
            salida = run_command('systemctl status smbd')
            if salida is not None:
                if salida.find('running') > -1:
                    bot.send_message(chat_id=update.message.chat_id,
                                     text="Samba está funcionando!")
                    return
                elif salida.find('dead') > -1:
                    bot.send_message(chat_id=update.message.chat_id,
                                     text="Samba está parado!")
                    return
            bot.send_message(chat_id=update.message.chat_id,
                             text="Algo no va bien!!! Samba está parado!")

        def info(bot, update):
            reply_keyboard = [['MariaDB', 'Apache', 'OpenVPN']]
            update.message.reply_text(
                'Selecciona un servicio:',
                reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                                 one_time_keyboard=True))
            return SERVICE

        def info2(bot, update):
            keyboard = [[InlineKeyboardButton("MariaDB", callback_data='1'),
                         InlineKeyboardButton("Apache", callback_data='2')],
                        [InlineKeyboardButton("OpenVPN", callback_data='3')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            update.message.reply_text('Elige el servicio:',
                                      reply_markup=reply_markup)

        def button(bot, update):
            query = update.callback_query
            logger.info('TELEGRAM query data: "%s" type: "%s"' % (
                str(query.data), str(type(query.data))))
            if query.data == '1':
                salida = run_command('systemctl status mariadb')
                if salida is not None:
                    if salida.find('running') > -1:
                        msg = 'MariaDB está funcionando!'
                    elif salida.find('dead') > -1:
                        msg = 'MariaDB está parado!'
                    else:
                        msg = 'Algo no va bien! MariaDB está parado!'
                else:
                    msg = 'Algo no va bien! MariaDB está parado!'
                bot.edit_message_text(text=msg,
                                      chat_id=query.message.chat_id,
                                      message_id=query.message.message_id)
            elif query.data == '2':
                salida = run_command('systemctl status apache2')
                if salida is not None:
                    if salida.find('running') > -1:
                        msg = 'Apache está funcionando!'
                    elif salida.find('dead') > -1:
                        msg = 'Apache está parado!'
                    else:
                        msg = 'Algo no va bien! Apache está parado!'
                else:
                    msg = 'Algo no va bien! Apache está parado!'
                bot.edit_message_text(text=msg,
                                      chat_id=query.message.chat_id,
                                      message_id=query.message.message_id)
            elif query.data == '3':
                salida = run_command('systemctl status openvpn')
                if salida is not None:
                    if salida.find('Active: active') > -1:
                        msg = 'OpenVPN está funcionando!'
                    elif salida.find('dead') > -1:
                        msg = 'OpenVPN está parado!'
                    else:
                        msg = 'Algo no va bien! OpenVPN está parado!'
                else:
                    msg = 'Algo no va bien! OpenVPN está parado!'
                bot.edit_message_text(text=msg,
                                      chat_id=query.message.chat_id,
                                      message_id=query.message.message_id)

        def mariadb(bot, update):
            salida = run_command('systemctl status mariadb')
            if salida is not None:
                if salida.find('running') > -1:
                    bot.send_message(chat_id=update.message.chat_id,
                                     text="MariaDB está funcionando!")
                    return
                elif salida.find('dead') > -1:
                    bot.send_message(chat_id=update.message.chat_id,
                                     text="MariaDB está parado!")
                    return
            bot.send_message(chat_id=update.message.chat_id,
                             text="Algo no va bien!!! MariaDB está parado!")

        def apache(bot, update):
            salida = run_command('systemctl status apache2')
            if salida is not None:
                if salida.find('running') > -1:
                    bot.send_message(chat_id=update.message.chat_id,
                                     text="Apache está funcionando!")
                    return
                elif salida.find('dead') > -1:
                    bot.send_message(chat_id=update.message.chat_id,
                                     text="Apache está parado!")
                    return
            bot.send_message(chat_id=update.message.chat_id,
                             text="Algo no va bien!!! Apache está parado!")

        def vpn(bot, update):
            salida = run_command('systemctl status openvpn')
            if salida is not None:
                if salida.find('Active: active') > -1:
                    bot.send_message(chat_id=update.message.chat_id,
                                     text="El VPN está funcionando!")
                    return
                elif salida.find('dead') > -1:
                    bot.send_message(chat_id=update.message.chat_id,
                                     text="El VPN está parado!")
                    return
            bot.send_message(chat_id=update.message.chat_id,
                             text="Algo no va bien!!! El VPN está parado!")

        def distro(bot, update):
            reply_keyboard = [['Trabajo', 'Diversión', 'Normal'],
                              ['Diseño', 'Programación']]
            update.message.reply_text(
                '¿Que uso le vas a dar a tu distribución?',
                reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                                 one_time_keyboard=True))
            return OPCION1

        def opcion1(bot, update):
            selected = update.message.text
            if selected == 'Trabajo':
                update.message.reply_text(
                    'Yo probaría una de estas: "OpenSUSE", "Fedora", "Debian"',
                    reply_markup=ReplyKeyboardRemove())
                return ConversationHandler.END
            elif selected == 'Diversión':
                reply_keyboard = [['Si', 'No']]
                update.message.reply_text(
                    '¿Eres un Geek?',
                    reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                                     one_time_keyboard=True))
                return OPCION2
            elif selected == 'Normal':
                reply_keyboard = [['Si', 'No']]
                update.message.reply_text(
                    '¿Has utilizado antes una distribución Linux?',
                    reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                                     one_time_keyboard=True))
                return OPCION3
            elif selected == 'Diseño':
                reply_keyboard = [['Windows', 'Mac']]
                update.message.reply_text(
                    '¿Que sistema operativo has utilizado antes?',
                    reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                                     one_time_keyboard=True))
                return OPCION4
            elif selected == 'Programación':
                reply_keyboard = [['Rápido y funcionando', 'Configurar mi SO']]
                update.message.reply_text(
                    '¿Que prefires?',
                    reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                                     one_time_keyboard=True))
                return OPCION5

        def opcion2(bot, update):
            selected = update.message.text
            if selected == 'Si':
                reply_keyboard = [['Si', 'No']]
                update.message.reply_text(
                    '¿Has probado Arch?',
                    reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                                     one_time_keyboard=True))
                return OPCION21
            elif selected == 'No':
                reply_keyboard = [['Si', 'No']]
                update.message.reply_text(
                    '¿Has utilizado antes una distribución Linux?',
                    reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                                     one_time_keyboard=True))
                return OPCION3

        def opcion21(bot, update):
            selected = update.message.text
            if selected == 'Si':
                msg = 'Yo probaría una de estas: "Arch", "Manjaro", \
"Antergos", "Apricity OS"'
            else:
                msg = 'Yo probaría una de estas: "Gentoo", "CentOS", \
"Debian", "Slackware"'
            update.message.reply_text(
                msg,
                reply_markup=ReplyKeyboardRemove())
            return ConversationHandler.END

        def opcion3(bot, update):
            selected = update.message.text
            if selected == 'Si':
                reply_keyboard = [['Ubuntu', 'Linux Mint'],
                                  ['Manjaro', 'Fedora']]
                update.message.reply_text(
                    '¿Que distro probaste antes?',
                    reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                                     one_time_keyboard=True))
                return OPCION31
            else:
                reply_keyboard = [['Windows', 'Mac']]
                update.message.reply_text(
                    '¿Que sistema operativo has utilizado antes?',
                    reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                                     one_time_keyboard=True))
                return OPCION4

        def opcion31(bot, update):
            selected = update.message.text
            if selected == 'Ubuntu':
                msg = 'Yo probaría una de estas: "Linux Mint", "Ubuntu Mate", \
"Kubuntu", "Elementary OS"'
            elif selected == 'Linux':
                msg = 'Yo probaría una de estas: "Ubuntu", "Kubuntu", \
"Fedora", "Manjaro"'
            elif selected == 'Manjaro':
                msg = 'Yo probaría una de estas: "Apricity OS", "Ubuntu", \
"Antergos", "Fedora"'
            else:
                msg = 'Yo probaría una de estas: "Ubuntu", "Ubuntu GNOME", \
"Kubuntu", "Linux Mint"'
            update.message.reply_text(
                msg,
                reply_markup=ReplyKeyboardRemove())
            return ConversationHandler.END

        def opcion4(bot, update):
            selected = update.message.text
            if selected == 'Windows':
                msg = 'Yo probaría una de estas: "Kubuntu", "Linux Mint", \
"Apricity OS"'
            else:
                msg = 'Yo probaría una de estas: "Ubuntu", "Elementary OS"'
            update.message.reply_text(
                msg,
                reply_markup=ReplyKeyboardRemove())
            return ConversationHandler.END

        def opcion5(bot, update):
            selected = update.message.text
            if selected == 'Rápido y funcionando':
                msg = 'Yo probaría una de estas: "Ubuntu", "Linux Mint", \
"Ubuntu Mate", "OpenSUSE"'
            else:
                msg = 'Yo probaría una de estas: "Arch", "Manjaro", \
"Antergos", "Apricity OS"'
            update.message.reply_text(
                msg,
                reply_markup=ReplyKeyboardRemove())
            return ConversationHandler.END

        def service(bot, update):
            selected = update.message.text
            if selected == 'MariaDB':
                salida = run_command('systemctl status mariadb')
                if salida is not None:
                    if salida.find('running') > -1:
                        msg = 'MariaDB está funcionando!'
                    elif salida.find('dead') > -1:
                        msg = 'MariaDB está parado!'
                    else:
                        msg = 'Algo no va bien! MariaDB está parado!'
                else:
                    msg = 'Algo no va bien! MariaDB está parado!'
                update.message.reply_text(
                    msg,
                    reply_markup=ReplyKeyboardRemove())
            elif selected == 'Apache':
                salida = run_command('systemctl status apache2')
                if salida is not None:
                    if salida.find('running') > -1:
                        msg = 'Apache está funcionando!'
                    elif salida.find('dead') > -1:
                        msg = 'Apache está parado!'
                    else:
                        msg = 'Algo no va bien! Apache está parado!'
                else:
                    msg = 'Algo no va bien! Apache está parado!'
                update.message.reply_text(
                    msg,
                    reply_markup=ReplyKeyboardRemove())
            elif selected == 'OpenVPN':
                salida = run_command('systemctl status openvpn')
                if salida is not None:
                    if salida.find('Active: active') > -1:
                        msg = 'OpenVPN está funcionando!'
                    elif salida.find('dead') > -1:
                        msg = 'OpenVPN está parado!'
                    else:
                        msg = 'Algo no va bien! OpenVPN está parado!'
                else:
                    msg = 'Algo no va bien! OpenVPN está parado!'
                update.message.reply_text(
                    msg,
                    reply_markup=ReplyKeyboardRemove())
            return ConversationHandler.END

        def cancel(bot, update):
            update.message.reply_text('', reply_markup=ReplyKeyboardRemove())
            return ConversationHandler.END

        def consejo(bot, update):
            salida = run_command('fortune')
            if salida is not None:
                bot.send_message(chat_id=update.message.chat_id,
                                 text=salida)

        def caps(bot, update, args):
            text_caps = ' '.join(args).upper()
            bot.send_message(chat_id=update.message.chat_id, text=text_caps)

        def echo(bot, update):
            bot.send_message(chat_id=update.message.chat_id,
                             text=update.message.text)

        def unknown(bot, update):
            bot.send_message(chat_id=update.message.chat_id,
                             text="Lo siento, no entiendo esa orden.")

        def error(bot, update, error):
            logger.warning('Update "%s" caused error "%s"' % (update, error))

        def stop(bot, update):
            bot.send_message(chat_id=update.message.chat_id,
                             text="Parando el bot")
            updater.stop()

        def grises(bot, update):
            photo_file = bot.get_file(update.message.photo[-1].file_id)
            response = requests.get(photo_file['file_path'])
            img = Image.open(BytesIO(response.content))
            img = img.convert('LA')
            bio = BytesIO()
            bio.name = 'image.png'
            img.save(bio, 'PNG')
            bio.seek(0)
            bot.send_photo(chat_id=update.message.chat_id,
                           photo=bio)

        def take_photo(bot, update):
            if exits_camera is True:
                rasp_photo = BytesIO()
                rasp_photo.name = 'image.png'
                try:
                    camera = PiCamera()
                    camera.start_preview()
                    # Camera warm-up time
                    sleep(2)
                    camera.capture(rasp_photo, format='png',
                                   use_video_port=True)
                except Exception as e:
                    print(e)
                finally:
                    camera.close()
                rasp_photo.seek(0)
                bot.send_photo(chat_id=update.message.chat_id,
                               photo=rasp_photo)
            else:
                bot.send_message(chat_id=update.message.chat_id,
                                 text="O no hay cámara o no la puedo usar!!!")

        def tobase64(bot, update):
            photo_file = bot.get_file(update.message.document.file_id)
            response = requests.get(photo_file['file_path'])
            encoded_string = base64.b64encode(response.content).decode()
            bot.send_message(chat_id=update.message.chat_id,
                             text=encoded_string)

        def inline_wordreference(bot, update):
            query = update.inline_query.query
            if not query:
                return
            results = list()
            for result in definition(query):
                results.append(
                    InlineQueryResultArticle(
                        id=query,
                        title='Significado en WordReference',
                        description=result,
                        input_message_content=InputTextMessageContent(result))
                )
            bot.answer_inline_query(update.inline_query.id, results)

        inline_wordreference_handler = InlineQueryHandler(inline_wordreference)
        dispatcher.add_handler(inline_wordreference_handler)

        start_handler = CommandHandler('start', start)
        dispatcher.add_handler(start_handler)

        consejo_handler = CommandHandler('consejo', consejo)
        dispatcher.add_handler(consejo_handler)

        photo_handler = CommandHandler('foto', take_photo)
        dispatcher.add_handler(photo_handler)

        temp_handler = CommandHandler('temp', temp)
        dispatcher.add_handler(temp_handler)

        samba_handler = CommandHandler('samba', samba)
        dispatcher.add_handler(samba_handler)

        samba_mariadb = CommandHandler('mariadb', mariadb)
        dispatcher.add_handler(samba_mariadb)

        apache_handler = CommandHandler('apache', apache)
        dispatcher.add_handler(apache_handler)

        vpn_handler = CommandHandler('vpn', vpn)
        dispatcher.add_handler(vpn_handler)

        caps_handler = CommandHandler('caps', caps, pass_args=True)
        dispatcher.add_handler(caps_handler)

        stop_handler = CommandHandler('stop', stop)
        dispatcher.add_handler(stop_handler)

        info2_handler = CommandHandler('info2', info2)
        dispatcher.add_handler(info2_handler)
        dispatcher.add_handler(CallbackQueryHandler(button))

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('info', info)],
            states={
                SERVICE: [RegexHandler('^(MariaDB|Apache|OpenVPN)$', service)]
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        dispatcher.add_handler(conv_handler)

        distro_handler = ConversationHandler(
            entry_points=[CommandHandler('distro', distro)],
            states={
                OPCION1: [RegexHandler(
                    '^(Trabajo|Diversión|Normal|Diseño|Programación)$',
                    opcion1)],
                OPCION2: [RegexHandler('^(Si|No)$', opcion2)],
                OPCION3: [RegexHandler('^(Si|No)$', opcion3)],
                OPCION4: [RegexHandler('^(Windows|Mac)$', opcion4)],
                OPCION5: [RegexHandler(
                    '^(Rápido y funcionando|Configurar mi SO)$', opcion5)],
                OPCION21: [RegexHandler('^(Si|No)$', opcion21)],
                OPCION31: [RegexHandler('^(Ubuntu|Linux|Manjaro|Fedora)$',
                           opcion31)],
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        dispatcher.add_handler(distro_handler)

        echo_handler = MessageHandler(Filters.text, echo)
        dispatcher.add_handler(echo_handler)

        grises_handler = MessageHandler(Filters.photo, grises)
        dispatcher.add_handler(grises_handler)

        base64_handler = MessageHandler(Filters.document, tobase64)
        dispatcher.add_handler(base64_handler)

        dispatcher.add_error_handler(error)

        unknown_handler = MessageHandler(Filters.command, unknown)
        dispatcher.add_handler(unknown_handler)

        # Start the Bot
        updater.start_polling(allowed_updates=[])

        # Run the bot until you press Ctrl-C or the process receives SIGINT,
        # SIGTERM or SIGABRT. This should be used most of the time, since
        # start_polling() is non-blocking and will stop the bot gracefully.
        updater.idle()


if __name__ == '__main__':
    usage = "usage: %prog [options] arg"
    parser = OptionParser(usage=usage)
    parser.add_option('-a', '--audio_file', dest='audio_file',
                      help='send an audio to the channel')
    parser.add_option('-c', '--set-channel-id', dest='channel_id',
                      metavar='CHANNEL_ID',
                      help='set channel id where bot will send messages')
    parser.add_option('-d', '--document_file', dest='document_file',
                      help='send a document to the channel')
    parser.add_option('-g', '--get-images',
                      action='store_true', dest='get_images', default=False,
                      help='get all images from chat_id')
    parser.add_option('-i', '--image_file', dest='image_file',
                      help='send a image to the channel')
    parser.add_option('-m', '--message', dest='message',
                      help='send a message to the channel')
    parser.add_option('-o', '--work alone',
                      action='store_true', dest='only', default=False,
                      help='Allow bot work alone')
    parser.add_option('-p', '--print-config',
                      action='store_true', dest='print_config', default=False,
                      help='Print configuration')
    parser.add_option('-t', '--set-token', dest='token',
                      metavar='TOKEN',
                      help='set the TOKEN of the bot')

    (options, args) = parser.parse_args()
    # Send audio file
    if options.audio_file is not None:
        send_audio(options.audio_file)
    # Set channel id
    if options.channel_id is not None:
        set_channel_id(options.channel_id)
    # Send document file
    if options.document_file is not None:
        send_document(options.document_file)
    # Send message
    if options.message is not None:
        send_message(options.message)
    # Send image
    if options.image_file is not None:
        send_image(options.image_file)
    # Print
    if options.print_config is True:
        print_config()
    # Get Images
    if options.get_images is True:
        get_images()
    # Work Alone
    if options.only is True:
        only()
    # Set Token
    if options.token is not None:
        set_token(options.token)

    '''
    start - Inicio
    consejo - Dame un consejo
    foto - Toma una foto del puesto de trabajo
    temp - Dime la temperatura del procesador
    samba - Dime si samba está funcionando
    mariadb - Dime si mariadb está funcionando
    apache - Dime si apache está funcionando
    vpn - Dime si la VPN  está funcionando
    caps - Pasa un texto a mayúsculas
    stop - Para el bot
    info1 - Menú de servicios tipo 1
    info2 - Menú de servicios tipo 2
    '''
